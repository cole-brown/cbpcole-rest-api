#+TITLE:       2021-06-12_Clostra_Backend-Homework
#+AUTHOR:      Cole Brown
#+EMAIL:       cole@brown.dev
#+DATE:        [2021-06-12]


D:\vault\programmer\job-tests\2021-06-12_Clostra
/mnt/d/vault/programmer/job-tests/2021-06-12_Clostra

* Environment

Ubuntu 20.04 via WSL on Windows 10


* ├INFO───┤ Email
:LOGBOOK:
- State "├INFO───┤"  from              [2021-06-12 Sat 11:10]
:END:

Cole,

I very much enjoyed our conversation earlier this week. Here is our backend programming challenge. Please get back to me with a response within 48 hours. I look forward to seeing what you create!

-- ben

Clostra Backend Programming Challenge

Write a simple analytics service that accepts analytics reports as GET requests of the form:

/collect?cid=<UUID>

where cid is a unique client ID. The response should be 200 OK with an empty body.

The service should maintain a count of daily active users (unique cid's seen) for each GMT day.

The service should also support queries of the form:

/daily_uniques?d=<ISO 8601 date>

which should return the number of unique users seen for the given GMT day;

and of the form:

/monthly_uniques?d=<ISO 8601 date>

which should return the number of unique users seen in the month prior to and including the given GMT day.

The unique user counts may be approximate rather than precise if you can reason about accuracy.

For testing purposes, the collect endpoint should accept an optional query parameter d=<UNIX timestamp>, which can be used to override the timestamp associated with a given analytics report.

The system should be robust to restarts, but it is not necessary to retain data or support queries for dates older than 60 days.

Design for performance on a single machine and low operational cost.

--
Ben Teitelbaum
Head of Engineering
Clostra
ben@clostra.com
https://clostra.com


* ├INFO───┤ Requirements
:LOGBOOK:
- State "├INFO───┤"  from              [2021-06-12 Sat 11:10]
:END:
** Store:

Persistent.

UUID (hash)set per UTC date?
  - Set of unique uuids per UTC date is desired output for queries.

** REST APIs

*** /collect?cid=<UUID>&d=<UNIX-timestamp>

Return:
  - 200 OK
  - Empty

Store:
  - UUID, utcnow()'s date.
    + into the set of uniques per day, or as a row that can be processed as such.

Why Unix here and not on the getters as well?

*** /daily_uniques?d=<ISO-8601>

Should return the number of unique users seen for the given GMT day.

**** What is "Should return"?

  - as... a body of only that number, I'm assuming?


*** /monthly_uniques?d=<ISO-8601>

Which should return the number of unique users seen in the month prior to and including the given GMT day.


**** What is "The month prior to and including"?

To start of with, that's not a month.

"The month prior to" and then also "the month including"?
  - That's between 1.x and 2 months.

"The rolling 30 day window"?
  - That should have been worded as such.
    + But nothing is ever worded 100% unambigiously.

"From YYYY-MM-01 to YYYY-MM-DD"?
  - That's between 0.x and 1 month.
    + Is closest to an actual calendar month.


**** What is "Should return"?

  - as... a body of only that number, I'm assuming?

** Data Persistence

The system should be robust to restarts, but it is not necessary to retain data or support queries for dates older than 60 days.

Can't use "60 days" to figure out anything about the "Monthly Endpoint" paradox.
  - Probably just testing data range combined w/ reasonable design requirement allowance.

* ├INFO───┤ <<< Design >>>
:LOGBOOK:
- State "├INFO───┤"  from "├───────┤"  [2021-06-12 Sat 11:21]
- State "├───────┤"  from              [2021-06-12 Sat 11:10]
:END:

backend:
  - Python 3
  - sqlite3

Test:
  - Python 3 test script/cli?

host at:
  - localhost
  - port 80


* ├INFO───┤ Name
:LOGBOOK:
- State "├INFO───┤"  from              [2021-06-12 Sat 16:53]
:END:

"Clostra Backend Programming Challenge" is a bit loquatious.

CBPC is a bit of a tongue-twister.

cole: CBPC of Logging End-users
  - Recursive backronyms!

* ├INFO───┤ Docker
:LOGBOOK:
- State "├INFO───┤"  from              [2021-06-12 Sat 16:53]
:END:

Steal docker scripts from veredi or rust-book?
  - rust-book uses a from-scratch, so I think I need veredi's
    + Veredi is python code w/ python docker container.

Alternative:
  - venv, but eh... Docker works good.

* ├INFO───┤ Testing
:LOGBOOK:
- State "├INFO───┤"  from              [2021-06-12 Sat 16:54]
:END:

Docker container is accessed at... 'localhost'.

e.g. hello endpoint would be:
  http://localhost:8080/hello


** Create or reset database

command: ~flask init-db~

Or via docker aliases: doc-init
* ├DONE───┤ scripts
CLOSED: [2021-06-12 Sat 16:53]
:LOGBOOK:
- State "├DONE───┤"  from              [2021-06-12 Sat 16:53]
:END:

Bash:
  - [X] Steal the print/debug bash script helpers from my veredi-docker repo.
  - [X] Implement mockup of:
    + [X] ./cole
    + [X] ./test

Python:
  - Start ./test's __main__.
    + argparser that can be used for ./cole too.
      - Copy/paste, no need/time to bother with common lib (right now).

* ├KILLED─┤ Python __main__ files
CLOSED: [2021-06-12 Sat 16:54]
:LOGBOOK:
- State "├KILLED─┤"  from "├DONE───┤"  [2021-06-12 Sat 16:54] \\
  Switched to Flask.
- State "├DONE───┤"  from              [2021-06-12 Sat 16:54]
:END:

- [X] Steal argparse stuff from my 'tryst' repo.
- [X] Steal HelpfulErrorParser stuff from my 'tryst' repo.

* ├DONE───┤ Implement Docker Container(s) and Scripts
CLOSED: [2021-06-12 Sat 16:53]
:LOGBOOK:
- State "├DONE───┤"  from              [2021-06-12 Sat 16:53]
:END:

Steal stuff from veredi, etc for Docker build, run, etc.

Check in when working.



* ├DONE───┤ REST: /collect?cid=<UUID>&d=<UNIX-timestamp>
CLOSED: [2021-06-12 Sat 19:12]
:LOGBOOK:
- State "├DONE───┤"  from "├WAITING┤"  [2021-06-12 Sat 19:12]
- State "├WAITING┤"  from "├CURRENT┤"  [2021-06-12 Sat 18:08]
- State "├CURRENT┤"  from              [2021-06-12 Sat 16:55]
:END:

Params:
  - Required:
    - cid
  - Optional:
    - d

Return:
  - 200 OK
  - Empty

Store:
  - UUID, utcnow()'s date.
    + into the set of uniques per day, or as a row that can be processed as such.

No info about what I'm getting as my UUIDs.
  - Yay.
  - Has to be URL-safe though.
  - How lenient is the Python UUID lib?

* ├DONE───┤ TESTING-OF: /collect?cid=<UUID>&d=<UNIX-timestamp>
CLOSED: [2021-06-12 Sat 19:12]
:LOGBOOK:
- State "├DONE───┤"  from "├CURRENT┤"  [2021-06-12 Sat 19:12]
- State "├CURRENT┤"  from              [2021-06-12 Sat 19:12]
:END:

Don't bother with Flask's test harness stuff.

I want to hit the real REST API and don't have time to learn the internals of Flask...

Have test script just hit the endpoint with curl or something.
  - Maybe python.
  - I'll need valid UUIDs.

* ├DONE───┤ REST: /daily_uniques?d=<ISO-8601>
CLOSED: [2021-06-12 Sat 20:22]
:LOGBOOK:
- State "├DONE───┤"  from "├CURRENT┤"  [2021-06-12 Sat 20:22]
- State "├CURRENT┤"  from "├TODO───┤"  [2021-06-12 Sat 19:12]
:END:

Should return the number of unique users seen for the given GMT day.
  - What is "Should return"?
    + A body of only that number, I'm assuming?


* ├DONE───┤ TESTING-OF: /daily_uniques?d=<ISO-8601>
CLOSED: [2021-06-12 Sat 20:22]
:LOGBOOK:
- State "├DONE───┤"  from "├TODO───┤"  [2021-06-12 Sat 20:22]
:END:


* ├DONE───┤ REST: /monthly_uniques?d=<ISO-8601>
CLOSED: [2021-06-12 Sat 20:22]
:LOGBOOK:
- State "├DONE───┤"  from "├TODO───┤"  [2021-06-12 Sat 20:22]
:END:

Which should return the number of unique users seen in the month prior to and including the given GMT day.


** What is "The month prior to and including"?

To start of with, that's not a month.

"The month prior to" and then also "the month including"?
  - That's between 1.x and 2 months.

"The rolling 30 day window"?
  - That should have been worded as such.
    + But nothing is ever worded 100% unambigiously.

"From YYYY-MM-01 to YYYY-MM-DD"?
  - That's between 0.x and 1 month.
    + Is closest to an actual calendar month.

Assume: "From YYYY-MM-01 to YYYY-MM-DD"

** What is "Should return"?

  - as... a body of only that number, I'm assuming?


* ├DONE───┤ TESTING-OF: /monthly_uniques?d=<ISO-8601>
CLOSED: [2021-06-12 Sat 20:22]
:LOGBOOK:
- State "├DONE───┤"  from "├TODO───┤"  [2021-06-12 Sat 20:22]
:END:


* ├DONE───┤ Push to GitHub private repo
CLOSED: [2021-06-13 Sun 11:34]
:LOGBOOK:
- State "├DONE───┤"  from "├CURRENT┤"  [2021-06-13 Sun 11:34]
- State "├CURRENT┤"  from "├TODO───┤"  [2021-06-13 Sun 11:30]
:END:

Don't just call the GitHub repo 'cole'...
  - Clostra Backend Programming Challenge
    - cbpcole maybe?
    - cbpcole-rest-api maybe?

* ├DONE───┤ TESTING-OF: /collect?cid=<UUID>&d=<UNIX-timestamp>: Take 02
CLOSED: [2021-06-13 Sun 15:48]
:LOGBOOK:
- State "├DONE───┤"  from "├TODO───┤"  [2021-06-13 Sun 15:48]
:END:

- [X] Find/fix timezone bug.
  - I love timezones.

- [X] Add in some tests for repeated UUIDs.

- [X] Make test randomly seed a known amount of users into known UTC yyyy-mm-dd.
  - Need known values so we can verify in daily/monthly.
  - A dict of dates to number of users needed?
    + And pass same dict into daily/monthly tests.


* ├DONE───┤ TESTING-OF: /daily_uniques?d=<ISO-8601>: Take 02
CLOSED: [2021-06-13 Sun 14:48]
:LOGBOOK:
- State "├DONE───┤"  from "├TODO───┤"  [2021-06-13 Sun 14:48]
:END:

Make sure to test all days with known amounts of users in them.
  - Verify received value is correct count of users as per collect.

Also test some days with known 0 users.

* ├DONE───┤ TESTING-OF: /monthly_uniques?d=<ISO-8601>: Take 02
CLOSED: [2021-06-13 Sun 15:48]
:LOGBOOK:
- State "├DONE───┤"  from "├TODO───┤"  [2021-06-13 Sun 15:48]
:END:

- [X] Make sure to test all months with known amounts of users in them.
  - Verify received value is correct count of users as per collect.

- [X] Also test some month with known 0 users.


* ├DONE───┤ Push to GitHub private repo
CLOSED: [2021-06-13 Sun 15:48]
:LOGBOOK:
- State "├DONE───┤"  from              [2021-06-13 Sun 15:48]
:END:
* Clean up

Clean up:
  - [X] Find/fix TODOs.
  - [X] Clean up imports in all files.
  - [ ] Double check defs for propert typing.
  - [ ] Double check globals, class/instance vars for proper typing.

* ├TODO───┤ README.org/md

* Push to GitHub private repo
* Clean up

Clean up:
  - [X] Instructions or no?
    + Probably some made a README headline to track this.
    + Has its own headline.

  - [ ] Combine functions that are similar?


* For beauty's sake:

Enclose test output in lines?

Currently have:
────────────────────────────────────────
/monthly_uniques
  url: http://localhost:8080/monthly_uniques
────────────────────
Today

─────
  params: {'d': '2021-06-13'}
  [ OK ] result:
    status: 200 OK
    url:    http://localhost:8080/monthly_uniques?d=2021-06-13
    text:   20

────────────────────────────────────────
[ OK ]


Change to:
┌────────────────────────────────────────
│ /monthly_uniques
│   url: http://localhost:8080/monthly_uniques
├────────────────────
│ Today
│
├─────
│  params: {'d': '2021-06-13'}
│  [ OK ] result:
│    status: 200 OK
│    url:    http://localhost:8080/monthly_uniques?d=2021-06-13
│    text:   20
│
├────────────────────────────────────────
│ [ OK ]
└────────────────────────────────────────

* Push to GitHub private repo
