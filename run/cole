#!/usr/bin/env bash

_cole_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
source "${_cole_dir}/_debug.sh"
source "${_cole_dir}/_print.sh"


# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

host='localhost' # 127.0.0.1
port=80

pid_file='run.pid'
pid_path="${_cole_dir}/${pid_file}"

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

cole_title_unnecessarily_pretty() {
    local _title="cole"
    local _subtitle="(CBPC of Logging End-users)"

    if [ ! -z "$1" ]; then
        _title="$1"
    fi

    max_len "$_subtitle"
    local _width=$LEN_MAX

    if ! build_line $_width '─' ''; then
        echo "version_print: build_line('─') failed?!"
        echo "  build_line $_width '─' '\n'"
        echo "    -> LINE_BUILT: '$LINE_BUILT'"
    fi
    local _solid_line="$LINE_BUILT"

    # ...cuz I'm a sucker for centered titles. >.<
    local _padding=''
    local _left=''
    local _right=''
    (( _padding=($_width - ${#_title}) ))
    (( _left=($_padding / 2) )) # floor
    (( _right=(($_padding + 2 - 1) / 2) )) # ceiling

    dbg_print "width: $_width"
    dbg_print "title: ${#_title}"
    dbg_print "padding: $_padding"
    dbg_print "left: $_left"
    dbg_print "right: $_right"

    # ------------------------------
    # Print out a super-ultra-mega-pretty versions info box.
    # ------------------------------

    printf "    ┌─%s─┐\n" "$_solid_line"
    printf "    │ %${_left}s%s%${_right}s │\n" '' "$_title" ''
    printf "    │ %s │\n" "$_subtitle"
    printf "    └─%s─┘\n" "$_solid_line"

    echo
}


cole_run() {
    # Just comment out if not desired:
    cole_title_unnecessarily_pretty

    # ------------------------------
    # Get Host/Port
    # ------------------------------
    local _host="$host"
    if [ ! -z "$1" ]; then
        _host="$1"
    fi

    local _port="$port"
    if [ ! -z "$2" ]; then
        _port="$2"
    fi

    # ------------------------------
    # Run backend.
    # ------------------------------
    # Run in background.
    nohup /usr/bin/env python3 "${_cole_dir}/../code/cole/cole.py" \
        --host $_host \
        --port $_port \
        &
    # Save pid to file so we can kill backend.
    local _pid=$!
    echo $_pid > "${pid_path}"

    echo "'cole' server running as pid: $_pid"
}


cole_kill() {
    # Just comment out if not desired:
    cole_title_unnecessarily_pretty "Killing cole..."

    # kill using pid in file.
    kill -9 `cat ${pid_path}`
    rm ${pid_path}
}


# ------------------------------------------------------------------------------
# Run
# ------------------------------------------------------------------------------

# Toggle run:
#   - If pid file exists: try to kill process and delete file.
#   - If not, start process and make pid file.
if [ -f ${pid_path} ]; then
    cole_kill
else
    cole_run
fi

